package com.cyber.punk.vanila_block;

import com.cyber.punk.BlockUtils;
import net.minecraft.block.*;
import net.minecraft.block.material.Material;
import net.minecraft.state.DirectionProperty;
import net.minecraft.util.Direction;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.shapes.ISelectionContext;
import net.minecraft.util.math.shapes.VoxelShape;
import net.minecraft.util.math.shapes.VoxelShapes;
import net.minecraft.world.IBlockReader;
import net.minecraftforge.common.ToolType;

import java.util.stream.Stream;

public class DungeonDecorateHeads extends BlockUtils {
    public static final DirectionProperty FACING = HorizontalBlock.FACING;
    public DungeonDecorateHeads() {
        super (AbstractBlock.Properties.of(Material.WOOD)
                .strength(3.5f,4.0f));
    }

    private static final VoxelShape SHAPE_N;

    static {
        Stream<VoxelShape> shapeStream = Stream.of(
                Block.box(3.9007451954062144, 10, 2.6239419755555886, 11.900745195406214, 16, 10.623941975555589),
                Block.box(8.650745195406214, 13, 2.1239419755555886, 11.150745195406214, 14, 2.6239419755555886),
                Block.box(4.6507451954062144, 13, 2.1239419755555886, 7.1507451954062144, 14, 2.6239419755555886),
                Block.box(4.9007451954062144, 8, 5.623941975555589, 10.900745195406214, 10, 10.623941975555589),
                Block.box(4.9007451954062144, 8, 3.6239419755555886, 10.900745195406214, 9, 5.623941975555589),
                Block.box(7.9007451954062144, 2, 2.6239419755555886, 15.900745195406214, 8, 10.623941975555589),
                Block.box(8.650745195406214, 5, 2.1239419755555886, 11.150745195406214, 6, 2.6239419755555886),
                Block.box(12.650745195406214, 5, 2.1239419755555886, 15.150745195406214, 6, 2.6239419755555886),
                Block.box(8.900745195406214, 0, 5.623941975555589, 14.900745195406214, 2, 10.623941975555589),
                Block.box(8.900745195406214, 0, 3.6239419755555886, 14.900745195406214, 1, 5.623941975555589),
                Block.box(12.349254804593786, 8.5, 4.288441649995869, 13.849254804593786, 9.5, 9.288441649995868),
                Block.box(11.349254804593786, 8, 2.288441649995871, 13.349254804593786, 10, 4.288441649995869),
                Block.box(13.349254804593786, 8.4, 2.788441649995871, 14.849254804593786, 9.6, 4.288441649995869),
                Block.box(11.508392406932943, 8.4, 9.283434211973844, 13.008392406932943, 9.6, 10.783434211973844),
                Block.box(13.008392406932943, 8, 9.283434211973844, 15.008392406932943, 10, 11.283434211973844),
                Block.box(-0.09925480459378555, 2, 2.6239419755555886, 7.9007451954062144, 8, 10.623941975555589),
                Block.box(0.6507451954062144, 5, 2.1239419755555886, 3.1507451954062144, 6, 2.6239419755555877),
                Block.box(4.6507451954062144, 5, 2.1239419755555886, 7.1507451954062144, 6, 2.6239419755555886),
                Block.box(0.9007451954062144, 0, 5.623941975555589, 6.9007451954062144, 2, 10.623941975555589),
                Block.box(0.9007451954062144, 0, 3.6239419755555886, 6.9007451954062144, 1, 5.623941975555589),
                Block.box(5.299908187190944, 0.5, 11.876058024444411, 10.299908187190942, 1.5, 13.376058024444411),
                Block.box(10.299908187190942, 0, 10.876058024444411, 12.299908187190942, 2, 12.876058024444411),
                Block.box(10.299908187190942, 0.3999999999999999, 12.876058024444411, 11.799908187190942, 1.6, 14.376058024444411),
                Block.box(3.804915625212967, 0.3999999999999999, 11.035195626783565, 5.304915625212967, 1.6, 12.535195626783565),
                Block.box(3.304915625212967, 0, 12.535195626783565, 5.304915625212967, 2, 14.535195626783565)
        );
        SHAPE_N = shapeStream.reduce(VoxelShapes::or).get();
    }

    private static final VoxelShape SHAPE_E;

    static {
        Stream<VoxelShape> shapeStream = Stream.of(
                Block.box(5.376058024444411, 10, 3.9007451954062144, 13.376058024444411, 16, 11.900745195406214),
                Block.box(13.376058024444411, 13, 8.650745195406214, 13.876058024444411, 14, 11.150745195406214),
                Block.box(13.376058024444411, 13, 4.6507451954062144, 13.876058024444411, 14, 7.1507451954062144),
                Block.box(5.376058024444411, 8, 4.9007451954062144, 10.376058024444411, 10, 10.900745195406214),
                Block.box(10.376058024444411, 8, 4.9007451954062144, 12.376058024444411, 9, 10.900745195406214),
                Block.box(5.376058024444411, 2, 7.9007451954062144, 13.376058024444411, 8, 15.900745195406214),
                Block.box(13.376058024444411, 5, 8.650745195406214, 13.876058024444411, 6, 11.150745195406214),
                Block.box(13.376058024444411, 5, 12.650745195406214, 13.876058024444411, 6, 15.150745195406214),
                Block.box(5.376058024444411, 0, 8.900745195406214, 10.376058024444411, 2, 14.900745195406214),
                Block.box(10.376058024444411, 0, 8.900745195406214, 12.376058024444411, 1, 14.900745195406214),
                Block.box(6.7115583500041325, 8.5, 12.349254804593786, 11.71155835000413, 9.5, 13.849254804593786),
                Block.box(11.71155835000413, 8, 11.349254804593786, 13.711558350004129, 10, 13.349254804593786),
                Block.box(11.71155835000413, 8.4, 13.349254804593786, 13.211558350004129, 9.6, 14.849254804593786),
                Block.box(5.216565788026156, 8.4, 11.508392406932943, 6.716565788026156, 9.6, 13.008392406932943),
                Block.box(4.716565788026156, 8, 13.008392406932943, 6.716565788026156, 10, 15.008392406932943),
                Block.box(5.376058024444411, 2, -0.09925480459378555, 13.376058024444411, 8, 7.9007451954062144),
                Block.box(13.376058024444411, 5, 0.6507451954062144, 13.876058024444411, 6, 3.1507451954062144),
                Block.box(13.376058024444411, 5, 4.6507451954062144, 13.876058024444411, 6, 7.1507451954062144),
                Block.box(5.376058024444411, 0, 0.9007451954062144, 10.376058024444411, 2, 6.9007451954062144),
                Block.box(10.376058024444411, 0, 0.9007451954062144, 12.376058024444411, 1, 6.9007451954062144),
                Block.box(2.6239419755555886, 0.5, 5.299908187190944, 4.123941975555589, 1.5, 10.299908187190942),
                Block.box(3.1239419755555886, 0, 10.299908187190942, 5.123941975555589, 2, 12.299908187190942),
                Block.box(1.6239419755555886, 0.3999999999999999, 10.299908187190942, 3.1239419755555886, 1.6, 11.799908187190942),
                Block.box(3.4648043732164346, 0.3999999999999999, 3.804915625212967, 4.964804373216435, 1.6, 5.304915625212967),
                Block.box(1.4648043732164346, 0, 3.304915625212967, 3.4648043732164346, 2, 5.304915625212967)
        );
        SHAPE_E = shapeStream.reduce((v1, v2) -> VoxelShapes.or(v1, v2)).get();
    }

    private static final VoxelShape SHAPE_S;

    static {
        Stream<VoxelShape> shapeStream = Stream.of(
                Block.box(4.0992548045937856, 10, 5.376058024444411, 12.099254804593786, 16, 13.376058024444411),
                Block.box(4.8492548045937856, 13, 13.376058024444411, 7.3492548045937856, 14, 13.876058024444411),
                Block.box(8.849254804593786, 13, 13.376058024444411, 11.349254804593786, 14, 13.876058024444411),
                Block.box(5.0992548045937856, 8, 5.376058024444411, 11.099254804593786, 10, 10.376058024444411),
                Block.box(5.0992548045937856, 8, 10.376058024444411, 11.099254804593786, 9, 12.376058024444411),
                Block.box(0.09925480459378555, 2, 5.376058024444411, 8.099254804593786, 8, 13.376058024444411),
                Block.box(4.8492548045937856, 5, 13.376058024444411, 7.3492548045937856, 6, 13.876058024444411),
                Block.box(0.8492548045937856, 5, 13.376058024444411, 3.3492548045937856, 6, 13.876058024444411),
                Block.box(1.0992548045937856, 0, 5.376058024444411, 7.0992548045937856, 2, 10.376058024444411),
                Block.box(1.0992548045937856, 0, 10.376058024444411, 7.0992548045937856, 1, 12.376058024444411),
                Block.box(2.1507451954062144, 8.5, 6.7115583500041325, 3.6507451954062144, 9.5, 11.71155835000413),
                Block.box(2.6507451954062144, 8, 11.71155835000413, 4.6507451954062144, 10, 13.711558350004129),
                Block.box(1.1507451954062144, 8.4, 11.71155835000413, 2.6507451954062144, 9.6, 13.211558350004129),
                Block.box(2.991607593067057, 8.4, 5.216565788026156, 4.491607593067057, 9.6, 6.716565788026156),
                Block.box(0.9916075930670569, 8, 4.716565788026156, 2.991607593067057, 10, 6.716565788026156),
                Block.box(8.099254804593786, 2, 5.376058024444411, 16.099254804593784, 8, 13.376058024444411),
                Block.box(12.849254804593786, 5, 13.376058024444411, 15.349254804593786, 6, 13.876058024444411),
                Block.box(8.849254804593786, 5, 13.376058024444411, 11.349254804593786, 6, 13.876058024444411),
                Block.box(9.099254804593786, 0, 5.376058024444411, 15.099254804593786, 2, 10.376058024444411),
                Block.box(9.099254804593786, 0, 10.376058024444411, 15.099254804593786, 1, 12.376058024444411),
                Block.box(5.700091812809058, 0.5, 2.6239419755555886, 10.700091812809056, 1.5, 4.123941975555589),
                Block.box(3.700091812809058, 0, 3.1239419755555886, 5.700091812809058, 2, 5.123941975555589),
                Block.box(4.200091812809058, 0.3999999999999999, 1.6239419755555886, 5.700091812809058, 1.6, 3.1239419755555886),
                Block.box(10.695084374787033, 0.3999999999999999, 3.4648043732164346, 12.195084374787033, 1.6, 4.964804373216435),
                Block.box(10.695084374787033, 0, 1.4648043732164346, 12.695084374787033, 2, 3.4648043732164346)
        );
        SHAPE_S = shapeStream.reduce((v1, v2) -> VoxelShapes.or(v1, v2)).get();
    }
    private static final VoxelShape SHAPE_W;

    static {
        Stream<VoxelShape> shapeStream = Stream.of(
                Block.box(2.6239419755555886, 10, 4.0992548045937856, 10.623941975555589, 16, 12.099254804593786),
                Block.box(2.1239419755555886, 13, 4.8492548045937856, 2.6239419755555886, 14, 7.3492548045937856),
                Block.box(2.1239419755555886, 13, 8.849254804593786, 2.6239419755555886, 14, 11.349254804593786),
                Block.box(5.623941975555589, 8, 5.0992548045937856, 10.623941975555589, 10, 11.099254804593786),
                Block.box(3.6239419755555886, 8, 5.0992548045937856, 5.623941975555589, 9, 11.099254804593786),
                Block.box(2.6239419755555886, 2, 0.09925480459378555, 10.623941975555589, 8, 8.099254804593786),
                Block.box(2.1239419755555886, 5, 4.8492548045937856, 2.6239419755555886, 6, 7.3492548045937856),
                Block.box(2.1239419755555886, 5, 0.8492548045937856, 2.6239419755555886, 6, 3.3492548045937856),
                Block.box(5.623941975555589, 0, 1.0992548045937856, 10.623941975555589, 2, 7.0992548045937856),
                Block.box(3.6239419755555886, 0, 1.0992548045937856, 5.623941975555589, 1, 7.0992548045937856),
                Block.box(4.288441649995869, 8.5, 2.1507451954062144, 9.288441649995868, 9.5, 3.6507451954062144),
                Block.box(2.288441649995871, 8, 2.6507451954062144, 4.288441649995869, 10, 4.6507451954062144),
                Block.box(2.788441649995871, 8.4, 1.1507451954062144, 4.288441649995869, 9.6, 2.6507451954062144),
                Block.box(9.283434211973844, 8.4, 2.991607593067057, 10.783434211973844, 9.6, 4.491607593067057),
                Block.box(9.283434211973844, 8, 0.9916075930670569, 11.283434211973844, 10, 2.991607593067057),
                Block.box(2.6239419755555886, 2, 8.099254804593786, 10.623941975555589, 8, 16.099254804593784),
                Block.box(2.1239419755555886, 5, 12.849254804593786, 2.6239419755555886, 6, 15.349254804593786),
                Block.box(2.1239419755555886, 5, 8.849254804593786, 2.6239419755555886, 6, 11.349254804593786),
                Block.box(5.623941975555589, 0, 9.099254804593786, 10.623941975555589, 2, 15.099254804593786),
                Block.box(3.6239419755555886, 0, 9.099254804593786, 5.623941975555589, 1, 15.099254804593786),
                Block.box(11.876058024444411, 0.5, 5.700091812809058, 13.376058024444411, 1.5, 10.700091812809056),
                Block.box(10.876058024444411, 0, 3.700091812809058, 12.876058024444411, 2, 5.700091812809058),
                Block.box(12.876058024444411, 0.3999999999999999, 4.200091812809058, 14.376058024444411, 1.6, 5.700091812809058),
                Block.box(11.035195626783565, 0.3999999999999999, 10.695084374787033, 12.535195626783565, 1.6, 12.195084374787033),
                Block.box(12.535195626783565, 0, 10.695084374787033, 14.535195626783565, 2, 12.695084374787033)
        );
        SHAPE_W = shapeStream.reduce((v1, v2) -> VoxelShapes.or(v1, v2)).get();
    }

    @Override
    public VoxelShape getShape(BlockState state, IBlockReader worldIn, BlockPos pos, ISelectionContext context) {
        Direction facing = state.getValue(FACING);
        switch (facing) {
            case EAST:
                return SHAPE_E;
            case SOUTH:
                return SHAPE_S;
            case WEST:
                return SHAPE_W;
            default:
                return SHAPE_N;
        }
    }
}
