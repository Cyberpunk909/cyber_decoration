package com.cyber.punk.block;

import net.minecraft.block.*;
import net.minecraft.block.material.Material;
import net.minecraft.item.BlockItemUseContext;
import net.minecraft.state.DirectionProperty;
import net.minecraft.state.StateContainer;
import net.minecraft.util.Direction;
import net.minecraft.util.Mirror;
import net.minecraft.util.Rotation;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.shapes.ISelectionContext;
import net.minecraft.util.math.shapes.VoxelShape;
import net.minecraft.util.math.shapes.VoxelShapes;
import net.minecraft.world.IBlockReader;
import net.minecraftforge.common.ToolType;
import org.jetbrains.annotations.Nullable;

import java.util.stream.Stream;

public class DungeonWoodChairWithBone extends Block {
    public static final DirectionProperty FACING = HorizontalBlock.FACING;

    private static final VoxelShape SHAPE_N;

    static {
        Stream<VoxelShape> shapeStream = Stream.of(
                Block.box(-0.4746520330135131, 12.809489211506296, 8.590959946478733, 2.525347966986487, 13.809489211506296, 11.590959946478733),
                Block.box(0.025346841964367428, 5.809488878928297, 9.090959946478733, 2.0253468419643674, 18.8094888789283, 11.090959946478733),
                Block.box(13.974653158035633, 6.537410940286152, 9.090959946478732, 15.974653158035633, 19.53741094028615, 11.090959946478732),
                Block.box(8.742870460178736, 9.999999999999996, -7.43831642086602, 10.742870460178736, 11.999999999999996, 3.5616835791339803),
                Block.box(5.028739689316015, 9.999999999999996, -6.317462597946107, 7.028739689316015, 11.999999999999996, 4.682537402053893),
                Block.box(4, 10.586581436778028, 5.885323568109216, 12, 23.586581436778026, 5.885323568109216),
                Block.box(12, 10.586581436778028, 5.885323568109216, 12, 23.586581436778026, 9.885323568109216),
                Block.box(4, 23.58658143677803, 5.885323568109216, 12, 23.58658143677803, 9.885323568109216),
                Block.box(4, 10.586581436778028, 9.885323568109216, 12, 23.586581436778026, 9.885323568109216),
                Block.box(4, 10.586581436778028, 5.885323568109216, 4, 23.586581436778026, 9.885323568109216),
                Block.box(4, 10.586581436778028, 5.885323568109216, 12, 10.586581436778028, 9.885323568109216),
                Block.box(6.2007935596423325, 24.56223494293764, 5.090959946478733, 14.200793559642332, 30.56223494293764, 13.090959946478733),
                Block.box(6.100793559642332, 28.56223494293764, 4.990959946478734, 6.100793559642332, 31.56223494293764, 13.190959946478733),
                Block.box(14.300793559642333, 28.56223494293764, 4.990959946478734, 14.300793559642333, 31.56223494293764, 13.190959946478733),
                Block.box(6.100793559642332, 28.56223494293764, 4.990959946478734, 14.300793559642331, 31.56223494293764, 4.990959946478734),
                Block.box(6.7007935596423325, 27.56223494293764, 4.590959946478733, 9.200793559642332, 28.56223494293764, 5.090959946478733),
                Block.box(11.200793559642332, 27.56223494293764, 4.590959946478733, 13.700793559642332, 28.56223494293764, 5.090959946478733),
                Block.box(7.2007935596423325, 22.56223494293764, 8.090959946478733, 13.200793559642332, 24.56223494293764, 13.090959946478733),
                Block.box(7.2007935596423325, 22.56223494293764, 6.090959946478733, 13.200793559642332, 23.56223494293764, 8.090959946478733),
                Block.box(1, 6, -0.9090400535212666, 15, 10, 13.090959946478733),
                Block.box(1, 0, 1.0909599464787334, 15, 6, 13.090959946478733),
                Block.box(2, 0, 13.090959946478733, 14, 32, 16.090959946478733),
                Block.box(15, 0, 0.0909599464787334, 18, 12, 13.090959946478733),
                Block.box(14, 12, -1.9090400535212666, 19, 16, 13.090959946478733),
                Block.box(14, 0, 13.090959946478733, 18, 30, 16.090959946478733),
                Block.box(-2, 0, 0.0909599464787334, 1, 12, 13.090959946478733),
                Block.box(-3, 12, -1.9090400535212666, 2, 16, 13.090959946478733),
                Block.box(-2, 0, 13.090959946478733, 2, 30, 16.090959946478733)
        );
        SHAPE_N = shapeStream.reduce((v1, v2) -> VoxelShapes.or(v1, v2)).get();
    }

    private static final VoxelShape SHAPE_E;

    static {
        Stream<VoxelShape> shapeStream = Stream.of(
                Block.box(4.409040053521267, 12.809489211506296, -1.4746520330135127, 7.409040053521267, 13.809489211506296, 1.5253479669864873),
                Block.box(4.909040053521267, 5.809488878928297, -0.9746531580356326, 6.909040053521267, 18.8094888789283, 1.0253468419643674),
                Block.box(4.909040053521268, 6.537410940286152, 12.974653158035633, 6.909040053521268, 19.53741094028615, 14.974653158035633),
                Block.box(12.43831642086602, 9.999999999999996, 7.742870460178736, 23.43831642086602, 11.999999999999996, 9.742870460178736),
                Block.box(11.317462597946108, 9.999999999999996, 4.028739689316015, 22.317462597946108, 11.999999999999996, 6.028739689316015),
                Block.box(10.114676431890784, 10.586581436778028, 3, 10.114676431890784, 23.586581436778026, 11),
                Block.box(6.114676431890784, 10.586581436778028, 11, 10.114676431890784, 23.586581436778026, 11),
                Block.box(6.114676431890784, 23.58658143677803, 3, 10.114676431890784, 23.58658143677803, 11),
                Block.box(6.114676431890784, 10.586581436778028, 3, 6.114676431890784, 23.586581436778026, 11),
                Block.box(6.114676431890784, 10.586581436778028, 3, 10.114676431890784, 23.586581436778026, 3),
                Block.box(6.114676431890784, 10.586581436778028, 3, 10.114676431890784, 10.586581436778028, 11),
                Block.box(2.9090400535212666, 24.56223494293764, 5.2007935596423325, 10.909040053521267, 30.56223494293764, 13.200793559642332),
                Block.box(2.809040053521267, 28.56223494293764, 5.100793559642332, 11.009040053521266, 31.56223494293764, 5.100793559642332),
                Block.box(2.809040053521267, 28.56223494293764, 13.300793559642333, 11.009040053521266, 31.56223494293764, 13.300793559642333),
                Block.box(11.009040053521266, 28.56223494293764, 5.100793559642332, 11.009040053521266, 31.56223494293764, 13.300793559642331),
                Block.box(10.909040053521267, 27.56223494293764, 5.7007935596423325, 11.409040053521267, 28.56223494293764, 8.200793559642332),
                Block.box(10.909040053521267, 27.56223494293764, 10.200793559642332, 11.409040053521267, 28.56223494293764, 12.700793559642332),
                Block.box(2.9090400535212666, 22.56223494293764, 6.2007935596423325, 7.909040053521267, 24.56223494293764, 12.200793559642332),
                Block.box(7.909040053521267, 22.56223494293764, 6.2007935596423325, 9.909040053521267, 23.56223494293764, 12.200793559642332),
                Block.box(2.9090400535212666, 6, 0, 16.909040053521267, 10, 14),
                Block.box(2.9090400535212666, 0, 0, 14.909040053521267, 6, 14),
                Block.box(-0.0909599464787334, 0, 1, 2.9090400535212666, 32, 13),
                Block.box(2.9090400535212666, 0, 14, 15.909040053521267, 12, 17),
                Block.box(2.9090400535212666, 12, 13, 17.909040053521267, 16, 18),
                Block.box(-0.0909599464787334, 0, 13, 2.9090400535212666, 30, 17),
                Block.box(2.9090400535212666, 0, -3, 15.909040053521267, 12, 0),
                Block.box(2.9090400535212666, 12, -4, 17.909040053521267, 16, 1),
                Block.box(-0.0909599464787334, 0, -3, 2.9090400535212666, 30, 1)
        );
        SHAPE_E = shapeStream.reduce((v1, v2) -> VoxelShapes.or(v1, v2)).get();
    }

    private static final VoxelShape SHAPE_S;

    static {
        Stream<VoxelShape> shapeStream = Stream.of(
                Block.box(13.474652033013513, 12.809489211506296, 4.409040053521267, 16.474652033013513, 13.809489211506296, 7.409040053521267),
                Block.box(13.974653158035633, 5.809488878928297, 4.909040053521267, 15.974653158035633, 18.8094888789283, 6.909040053521267),
                Block.box(0.025346841964367428, 6.537410940286152, 4.909040053521268, 2.0253468419643674, 19.53741094028615, 6.909040053521268),
                Block.box(5.257129539821264, 9.999999999999996, 12.43831642086602, 7.257129539821264, 11.999999999999996, 23.43831642086602),
                Block.box(8.971260310683984, 9.999999999999996, 11.317462597946108, 10.971260310683984, 11.999999999999996, 22.317462597946108),
                Block.box(4, 10.586581436778028, 10.114676431890784, 12, 23.586581436778026, 10.114676431890784),
                Block.box(4, 10.586581436778028, 6.114676431890784, 4, 23.586581436778026, 10.114676431890784),
                Block.box(4, 23.58658143677803, 6.114676431890784, 12, 23.58658143677803, 10.114676431890784),
                Block.box(4, 10.586581436778028, 6.114676431890784, 12, 23.586581436778026, 6.114676431890784),
                Block.box(12, 10.586581436778028, 6.114676431890784, 12, 23.586581436778026, 10.114676431890784),
                Block.box(4, 10.586581436778028, 6.114676431890784, 12, 10.586581436778028, 10.114676431890784),
                Block.box(1.7992064403576684, 24.56223494293764, 2.9090400535212666, 9.799206440357668, 30.56223494293764, 10.909040053521267),
                Block.box(9.899206440357668, 28.56223494293764, 2.809040053521267, 9.899206440357668, 31.56223494293764, 11.009040053521266),
                Block.box(1.699206440357667, 28.56223494293764, 2.809040053521267, 1.699206440357667, 31.56223494293764, 11.009040053521266),
                Block.box(1.6992064403576688, 28.56223494293764, 11.009040053521266, 9.899206440357668, 31.56223494293764, 11.009040053521266),
                Block.box(6.799206440357668, 27.56223494293764, 10.909040053521267, 9.299206440357668, 28.56223494293764, 11.409040053521267),
                Block.box(2.2992064403576684, 27.56223494293764, 10.909040053521267, 4.799206440357668, 28.56223494293764, 11.409040053521267),
                Block.box(2.7992064403576684, 22.56223494293764, 2.9090400535212666, 8.799206440357668, 24.56223494293764, 7.909040053521267),
                Block.box(2.7992064403576684, 22.56223494293764, 7.909040053521267, 8.799206440357668, 23.56223494293764, 9.909040053521267),
                Block.box(1, 6, 2.9090400535212666, 15, 10, 16.909040053521267),
                Block.box(1, 0, 2.9090400535212666, 15, 6, 14.909040053521267),
                Block.box(2, 0, -0.0909599464787334, 14, 32, 2.9090400535212666),
                Block.box(-2, 0, 2.9090400535212666, 1, 12, 15.909040053521267),
                Block.box(-3, 12, 2.9090400535212666, 2, 16, 17.909040053521267),
                Block.box(-2, 0, -0.0909599464787334, 2, 30, 2.9090400535212666),
                Block.box(15, 0, 2.9090400535212666, 18, 12, 15.909040053521267),
                Block.box(14, 12, 2.9090400535212666, 19, 16, 17.909040053521267),
                Block.box(14, 0, -0.0909599464787334, 18, 30, 2.9090400535212666)
        );
        SHAPE_S = shapeStream.reduce((v1, v2) -> VoxelShapes.or(v1, v2)).get();
    }
    private static final VoxelShape SHAPE_W;

    static {
        Stream<VoxelShape> shapeStream = Stream.of(
                Block.box(8.590959946478733, 12.809489211506296, 13.474652033013513, 11.590959946478733, 13.809489211506296, 16.474652033013513),
                Block.box(9.090959946478733, 5.809488878928297, 13.974653158035633, 11.090959946478733, 18.8094888789283, 15.974653158035633),
                Block.box(9.090959946478732, 6.537410940286152, 0.025346841964367428, 11.090959946478732, 19.53741094028615, 2.0253468419643674),
                Block.box(-7.43831642086602, 9.999999999999996, 5.257129539821264, 3.5616835791339803, 11.999999999999996, 7.257129539821264),
                Block.box(-6.317462597946108, 9.999999999999996, 8.971260310683984, 4.682537402053892, 11.999999999999996, 10.971260310683984),
                Block.box(5.885323568109216, 10.586581436778028, 4, 5.885323568109216, 23.586581436778026, 12),
                Block.box(5.885323568109216, 10.586581436778028, 4, 9.885323568109216, 23.586581436778026, 4),
                Block.box(5.885323568109216, 23.58658143677803, 4, 9.885323568109216, 23.58658143677803, 12),
                Block.box(9.885323568109216, 10.586581436778028, 4, 9.885323568109216, 23.586581436778026, 12),
                Block.box(5.885323568109216, 10.586581436778028, 12, 9.885323568109216, 23.586581436778026, 12),
                Block.box(5.885323568109216, 10.586581436778028, 4, 9.885323568109216, 10.586581436778028, 12),
                Block.box(5.090959946478733, 24.56223494293764, 1.7992064403576684, 13.090959946478733, 30.56223494293764, 9.799206440357668),
                Block.box(4.990959946478734, 28.56223494293764, 9.899206440357668, 13.190959946478733, 31.56223494293764, 9.899206440357668),
                Block.box(4.990959946478734, 28.56223494293764, 1.699206440357667, 13.190959946478733, 31.56223494293764, 1.699206440357667),
                Block.box(4.990959946478734, 28.56223494293764, 1.6992064403576688, 4.990959946478734, 31.56223494293764, 9.899206440357668),
                Block.box(4.590959946478733, 27.56223494293764, 6.799206440357668, 5.090959946478733, 28.56223494293764, 9.299206440357668),
                Block.box(4.590959946478733, 27.56223494293764, 2.2992064403576684, 5.090959946478733, 28.56223494293764, 4.799206440357668),
                Block.box(8.090959946478733, 22.56223494293764, 2.7992064403576684, 13.090959946478733, 24.56223494293764, 8.799206440357668),
                Block.box(6.090959946478733, 22.56223494293764, 2.7992064403576684, 8.090959946478733, 23.56223494293764, 8.799206440357668),
                Block.box(-0.9090400535212666, 6, 1, 13.090959946478733, 10, 15),
                Block.box(1.0909599464787334, 0, 1, 13.090959946478733, 6, 15),
                Block.box(13.090959946478733, 0, 2, 16.090959946478733, 32, 14),
                Block.box(0.0909599464787334, 0, -2, 13.090959946478733, 12, 1),
                Block.box(-1.9090400535212666, 12, -3, 13.090959946478733, 16, 2),
                Block.box(13.090959946478733, 0, -2, 16.090959946478733, 30, 2),
                Block.box(0.0909599464787334, 0, 15, 13.090959946478733, 12, 18),
                Block.box(-1.9090400535212666, 12, 14, 13.090959946478733, 16, 19),
                Block.box(13.090959946478733, 0, 14, 16.090959946478733, 30, 18)
        );
        SHAPE_W = shapeStream.reduce((v1, v2) -> VoxelShapes.or(v1, v2)).get();
    }

    public DungeonWoodChairWithBone() {
        super (AbstractBlock.Properties.of(Material.WOOD)
                .strength(3.5f,4.0f)
                .sound(SoundType.ANVIL)
                .harvestLevel(0)
                .harvestTool(ToolType.AXE)
                .requiresCorrectToolForDrops());
    }

    @Override
    public VoxelShape getCollisionShape(BlockState state, IBlockReader worldIn, BlockPos pos, ISelectionContext context) {
        return this.getShape(state, worldIn, pos, context);
    }

    @Override
    public VoxelShape getBlockSupportShape(BlockState state, IBlockReader worldIn, BlockPos pos) {
        return this.getShape(state, worldIn, pos, ISelectionContext.empty());
    }

    @Override
    public VoxelShape getInteractionShape(BlockState state, IBlockReader worldIn, BlockPos pos) {
        return this.getShape(state, worldIn, pos, ISelectionContext.empty());
    }

    @Override
    public VoxelShape getShape(BlockState state, IBlockReader worldIn, BlockPos pos, ISelectionContext context) {
        Direction facing = state.getValue(FACING);
        switch (facing) {
            case NORTH:
                return SHAPE_N;
            case EAST:
                return SHAPE_E;
            case SOUTH:
                return SHAPE_S;
            case WEST:
                return SHAPE_W;
            default:
                return SHAPE_N;
        }
    }

    @Nullable
    @Override
    public BlockState getStateForPlacement(BlockItemUseContext context) {
        Direction facing = context.getHorizontalDirection().getOpposite();
        return this.defaultBlockState().setValue(FACING, facing);
    }

    @Override
    public BlockState rotate(BlockState state, Rotation rotation) {
        Direction facing = state.getValue(FACING);
        Direction rotatedFacing = rotation.rotate(facing);
        return state.setValue(FACING, rotatedFacing);
    }

    @Override
    public BlockState mirror(BlockState state, Mirror mirrorIn) {
        Direction facing = state.getValue(FACING);
        Direction mirroredFacing = mirrorIn.mirror(facing);
        return state.setValue(FACING, mirroredFacing);
    }
    @Override
    protected void createBlockStateDefinition(StateContainer.Builder<Block, BlockState> builder) {
        builder.add(FACING);
    }
    protected void fillStateContainer(StateContainer.Builder<Block, BlockState> builder) {
        builder.add(FACING);
    }

}

